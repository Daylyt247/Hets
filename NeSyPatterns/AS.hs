{-# LANGUAGE DeriveDataTypeable #-}
{- |
Module      :  ./NeSyPatterns/AS.der.hs
Description :  Abstract syntax for neural-symbolic patterns
Copyright   :  (c) Till Mossakowski, Uni Magdeburg 2022
License     :  GPLv2 or higher, see LICENSE.txt

Maintainer  :  till.mossakowski@pvgu.de
Stability   :  experimental
Portability :  portable

Definition of abstract syntax for neural-symbolic patterns
-}

{-
  Ref.
  van Bekkum, M., de Boer, M., van Harmelen, F. et al.
  Modular design patterns for hybrid learning and reasoning systems.
  Appl Intell 51, 6528â€“6546 (2021). https://doi.org/10.1007/s10489-021-02394-3
-}

module NeSyPatterns.AS where

import Common.Id as Id
import Common.Doc
import Common.DocUtils
import Common.Keywords
import Common.AS_Annotation as AS_Anno

import Data.Data

-- DrIFT command
{-! global: GetRange !-}

-- | nodes are of form: ontology_term[id]
-- | both components are optional, but at least one must be present
data Node = Node {
    ontologyTerm :: (Maybe Id.Token),
    nesyId :: (Maybe Id.Token),
    nodeRange :: Id.Range
  }
  deriving (Show, Typeable, Data, Eq, Ord)

newtype BASIC_SPEC = Basic_spec [AS_Anno.Annoted BASIC_ITEM]
                  deriving (Show, Typeable, Data)

data BASIC_ITEM =
    Path [Node] -- written node -> ... -> node;
    deriving (Show, Typeable, Data)


newtype SYMB = Symb_id Id.Token
            deriving (Show, Eq, Ord, Typeable, Data)

data SYMB_ITEMS = Symb_items [SYMB] Id.Range
                  deriving (Show, Eq, Ord, Typeable, Data)

data SYMB_MAP_ITEMS = Symb_map_items [SYMB_OR_MAP] Id.Range
                      deriving (Show, Eq, Ord, Typeable, Data)

data SYMB_OR_MAP = Symb SYMB
                 | Symb_map SYMB SYMB Id.Range
                   -- pos: "|->"
                   deriving (Show, Eq, Ord, Typeable, Data)


-- Generated by DrIFT, look but don't touch!

instance GetRange Node where
  getRange = const nullRange
  rangeSpan x = case x of
    Node a b c -> joinRanges [rangeSpan a, rangeSpan b, rangeSpan c]

instance GetRange BASIC_SPEC where
  getRange = const nullRange
  rangeSpan x = case x of
    Basic_spec a -> joinRanges [rangeSpan a]

instance GetRange BASIC_ITEM where
  getRange = const nullRange
  rangeSpan x = case x of
    Path a -> joinRanges [rangeSpan a]

instance GetRange SYMB where
  getRange = const nullRange
  rangeSpan x = case x of
    Symb_id a -> joinRanges [rangeSpan a]

instance GetRange SYMB_ITEMS where
  getRange = const nullRange
  rangeSpan x = case x of
    Symb_items a b -> joinRanges [rangeSpan a, rangeSpan b]

instance GetRange SYMB_MAP_ITEMS where
  getRange = const nullRange
  rangeSpan x = case x of
    Symb_map_items a b -> joinRanges [rangeSpan a, rangeSpan b]

instance GetRange SYMB_OR_MAP where
  getRange = const nullRange
  rangeSpan x = case x of
    Symb a -> joinRanges [rangeSpan a]
    Symb_map a b c -> joinRanges [rangeSpan a, rangeSpan b,
                                  rangeSpan c]
